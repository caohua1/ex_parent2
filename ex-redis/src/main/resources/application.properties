
#DUBBOX
#dubbox:
 # application:
 #   name: xbin-store-service-redis
 #   organization: dubbox
#    owner: binux
#  registry:
 #   protocol: zookeeper
 #   address: 192.168.125.128:2181
 # annotation:
 #   package: com.ex
 # protocol:
 #   name: dubbo
 #   port: 20881
 #   host: 192.168.125.1
 #   timeout: 30000
 #   threadpool: fixed
  #  threads: 500
 #   accepts: 1000
 #   serialization: kryo
 #   optimizer: cn.binux.serial.SerializationOptimizerImpl
 # monitor:
 #   enabled: false
 #   address: 192.168.125.1:6060
  #  username: admin
 #   password: admin



server.port=8086
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0  
# Redis服务器地址
spring.redis.host=192.168.1.110
#spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379  
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8  
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1  
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8  
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0  
# 连接超时时间（毫秒）
spring.redis.timeout=0

#kafka
#cloud:
#stream:
#kafka:
#binder:
#brokers: 192.168.252.128:9092
#zk-nodes: 192.168.252.128:2181
#minPartitionCount: 1
#autoCreateTopics: true
#autoAddPartitions: true
#bindings:
#input:
#destination: topic-02
#            content-type: application/json
#content-type: application/x-java-object   #此种类型配置在消费端接受到的为一个实体类
#group: t1
#consumer:
#concurrency: 1
#partitioned: false
#output:
#destination: topic-02
#content-type: application/x-java-object
#producer:
#partitionCount: 1
#instance-count: 1
#instance-index: 0


#kafka
# 指定kafka 代理地址，可以多个
#spring.kafka.bootstrap-servers=192.168.1.188:9092
# 指定默认消费者group id
#spring.kafka.consumer.group-id=myGroup
# 指定默认topic id
#spring.kafka.template.default-topic= my-replicated-topic
# 指定listener 容器中的线程数，用于提高并发量
#spring.kafka.listener.concurrency= 3
# 每次批量发送消息的数量
#spring.kafka.producer.batch-size= 1000

#dubbo
#spring.dubbo.application.name=ex-redis
#spring.dubbo.registry.address=zookeeper://127.0.0.1:2181
#spring.dubbo.protocol.name=dubbo
#spring.dubbo.protocol.port=20880
#spring.dubbo.scan=com.ex.util.service
